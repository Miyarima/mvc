{% extends "base/base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1 class="center-text">Report</h1>

    <section>
        <h2 id="kmom01">Kmom01</h2>
        <h4>Berätta kort om dina förkunskaper och tidigare erfarenheter kring 
            objektorientering.</h4>
        <p>
            Jag har tidigare läst en kurs som heter "Algoritmer och datastrukturer
            med objektorienterad Python" där vi lärde oss mer ingripande hur
            objektorienterad programmering fungerar. Så min uppfattning av en klass
            är att det basically är en mall för att instansiera olika objekt från
            en baspunkt. Objektorienterat känns också som att man håller sig inom
            vissa ramar när man skriver kod. Dock ser jag fortfarande inte vad man
            vinner genom att skiva OO istället för funktionellt.
        </p><br>
        <h4>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder
            man behöver veta/förstå för att kunna komma igång och skapa sina första
            klasser?</h4>
        <p>
            För att skapa en klass i PHP måste man skriva "class" följt av namnet
            man vill ge klassen (som i vårt fall måste vara samma som filen), och
            sen ange de metoder och properties man vill att objekten ska ha inom
            curly brackets för att skapa en klass. Man bör också veta att 
            properties i PHP i största delen bara är privata och inte publika, 
            utan man istället skapar publika metoder som ändrar på de privata 
            properties. För att sen göra ett objekt av klassen måste man instansierar 
            klassen t.ex. "$person = new Person();", om man också antar att klassen 
            "Person" har metoden "setName" kan man gör det så här 
            "$person->setName("John");".
        </p><br>
        <h4>Reflektera kort över den kodbas, koden, strukturen som användes till
            uppgiften me/report, hur uppfattar du den?</h4>
        <p>
            Detta känns som en utbyggnad av de tidigare kurser vi har läst
            med extra komplexitet och struktur. Än så länge hittar jag 
            knapp vad jag letar efter bland alla mappar och sub-mappar.
            Samt hur allt hänger ihop känns fortfarande lite som magi.
            Men när det kommer till koden känns det än så länge väldigt bra,
            dock förstår jag inte riktigt hur controllers fungerar, men jag
            antar att vi kommer kolla på det i de kommande kursmomenten.
        </p><br>
        <h4>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner
            du extra intressanta och värdefulla?</h4>
        <p>
            Ganska svårt att svara på då jag öppnade den och såg att den var
            alldeles för lång för att läsa och i stort sätt lära sig något 
            nytt eller komma ihåg vad jag läst. Men jag öppnade den en gång
            till och den enda del jag läste som fångade mitt intresse var
            "Servers and Deployment", så jag skulle väl sig att den var 
            lite intressant. Men jag kan se den hela som väldigt värdefull
            om man nu skulle behöva veta något specifikt på ett kompakt och
            concise sett.
        </p><br>
        <h4>TIL?</h4>
        <p>
            Grundligt hur objekt och klasser skapas i PHP. Hur man skapar ett
            projekt med Symfony. Jag har också återigen lärt mig hur man gör
            ett repo lokalt och kopplar det till GitHub.
        </p><br>
    </section><br>

    <section>
        <h2 id="kmom02">Kmom02</h2>
        <h4>Förklara kort de objektorienterade konstruktionerna arv, komposition, 
            interface och trait och hur de används i PHP.</h4>
        <p>
            Arv används för att låta en klass ärva egenskaper och metoder från en 
            förälder klass. Som i sin tur oftast gör att koden blir mer dry och man 
            kan istället återanvända kod. Komposition är när man "sätter ihop" flera 
            klasser för att skapa något mer komplext. Så istället för att ärva från
            en annan klass använder man en instans av den andra klassen i den 
            nuvarande.<br><br> Interface är en samling metoder som inte har någon
            implementation, utan istället måste implementeras av klasser som har
            interfacet. Detta använder man för att klasserna som implementerar 
            detta ska få en gemensam samling av metoder. Trait är en samling metoder
            som kan återanvänds i flera klasser, utan att behöva använda sig av arv
            eller komposition.

        </p><br>
        <h4>Berätta om din implementation från uppgiften. Hur löste du uppgiften, 
            är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden 
            och dina klasser?</h4>
        <p>
            Jag löste uppgiften genom att skapa två kontroller, en för kort och 
            en för api:et. För att implementera detta skapade jag två klasser, 
            en Card-klass som innehåller kortets namn och metoder för att sätta 
            och hämta namnet, och en DeckOfCards-klass som innehåller  Card-objekt
            och metoder för att hantara dessa. Jag gjorde också ett trait som
            jag använder i både kort och api kontrollern. Traitet innehåller
            metoder för att skapa och hämta en kortlek, samt spara borttagna
            kort i sessionen. Jag gjorde traitet mest bara för att testa.
            <br><br>
            Routesen använder sig i stort sätt bara av metoderna i DeckOfCards
            och de i traitet. Det ända som skiljer sig mellan kort routesen och
            api:ets, är ett i api:et skulle vi ha post routes. Så varje get har
            en tillhörande post route som visar upp det slutgiltiga JSON svaret.
            <br><br>
            Klart det finns förbättringspotential, det gör det alltid, men det
            finns bara så mycket tid. Jag skulle ändå säga att jag är nöjd med
            min implementation av uppgiften och hur jag löst det.
        </p><br>
        <h4>Berätta hur det kändes att modellera ett kortspel med flödesdiagram 
            och psuedokod. Var det något som du tror stödjer dig i din problemlösning 
            och tankearbete för att strukturera koden kring en applikation?</h4>
        <p>
            Jag har varken följt ett flödesdiagram eller pseudokod i detta 
            kursmomentet, jag kan inte heller hitta någon vi skulle ha följt. 
            Så jag vet inte riktigt hur jag ska besvara denna frågan?
        </p><br>
        <h4>TIL?</h4>
        <p>
            Lite djupare i hur routes fungerar i PHP. Jag tror nu att jag har
            mer kolla på hur controllers fungerar som jag hade problem med i
            kmom01. Vad trait är och hur man använder det.
        </p><br>
    </section><br>

    <section>
        <h2 id="kmom04">Kmom04</h2>
        <h4>Berätta hur du upplevde att skriva kod som testar annan kod med 
            PHPUnit och hur du upplever phpunit rent allmänt.</h4>
        <p>
            Jag tycker det är ganska tråkigt att skriva tester, men när de 
            väl är skriva tycker jag det känns ganska bra. För då kan jag 
            körde de lite då och då för att kolla så att jag inte pajat 
            min kod eller funktionalitet (antaget att testerna kolla det). 
            Jag upplevde PHPunit i allmänhet som ganska bra, inte jätte 
            komplicerat och fungerade på typ samma sätt som unittester i Python.
        </p><br>
        <h4>Hur väl lyckades du med kodtäckningen av din kod, lyckades du 
            nå mer än 90% kodtäckning?</h4>
        <p>
            Jag lyckades att nå 100% kodtäckning på klasserna som jag skapade 
            innan spelet för att det var inget speciellt att testa där. 
            Men i min spel klass uppnådde jag bara 98-99% då en rad fick 
            jag inte till hur jag skulle testa då den bara inträffar väldigt 
            sällan. Men jag antar att det är något man skulle kunna lösa 
            med mock. Jag skulle ändå säga att jag lyckades ganska bra då 
            alla klasser har en kodtäckning på över 90%.
        </p><br>
        <h4>Upplever du din egen kod som “testbar kod” eller finns det delar 
            i koden som är mer eller mindre testbar och finns det saker som 
            kan göras för att förbättra kodens testbarhet?</h4>
        <p>
            Jag upplevde min egna kod som väldigt testbar då jag inte hade 
            några större problem att testa någon dela av koden. Bortsett 
            från den raden som bara inträffade någon gång ibland. Men nu 
            har jag inte större erfarenhet av att skiva tester så mina 
            kanske inte är jätte bra. Klart det finns saker som går att 
            förbättra, det gör det nästa alltid, men nu är jag väldigt 
            oerfaren så för tillfället kan jag inte se några förbättringar.
        </p><br>
        <h4>Valde du att skriva om delar av din kod för att förbättra den 
            eller göra den mer testbar, om så berätta lite hur du tänkte.</h4>
        <p>
            Tror det eller ej skrev jag inte om en ända rad för att förbättra 
            den eller för att göra den mer testbar då jag inte hade några 
            större problem att testa koden. Dock hittade jag ett fel i min 
            kod som jag fixade.
        </p><br>
        <h4>Fundera över om du anser att testbar kod är något som kan 
            identifiera “snygg och ren kod”.</h4>
        <p>
            "Snygg kod" i mitt huvud låter som något som borde vara väldigt 
            subjektivt, men man använder det på att sätt att beskriva "läsbar 
            kod". Så till snygg kod skulle jag säga nej, jag tycker att att 
            koden blir snyggare för att den är testbar. Men jag upplever det 
            däremot som mycket mer läsbart när koden är testbar.
        </p><br>
        <h4>TIL?</h4>
        <p>
            Hur man skriver unittester i PHP, samt skriver kommentarer för 
            att generera PHPdoc.
        </p><br>
    </section><br>

{% endblock %}