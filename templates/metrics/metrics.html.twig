{% extends "base/base.html.twig" %}

{% block title %}Report | Metrics{% endblock %}

{% block body %}
    <h1 class="center-text">Metrics</h1>

    <section>
        <h2 id="Introduktion">Introduktion</h2>
        <h4>Codestyle (kodstil)</h4>
        <p>
            Codestyle är att man ska skriva kod som är lätt att läsa, förstå och 
            underhålla. Detta kan innebära korrekt använding av indentering,
            använding av läsbara/förklarande variabel- och funktionsnamn, samt följa
            riktlinjer för hur koden ska vara formaterad då detta underlättar för 
            andra utvecklar att förstår koden och gör samarbetet smidigare. 
        </p><br>
        <h4>Coverage (täckning)</h4>
        <p>
            Code Coverage handlar om hur mycket av koden som testas av automatiska 
            tester. I det flesta fall, ju högre täckning desto bättre, då det är 
            mindre risk för buggar och fel. Men den är inte bulletproof, tester går
            att skapa som täcker mycket men testar inget. De automatiska testerna kan
            vara enhetstester, integrationstester, funktionstester, etc.<br><br>
            Så här kan det se ut<br>
            <a href="{{ asset('img/covrage.png') }}">
                <img src="{{ asset('img/covrage.png') }}" alt="">
            </a><br>
            Nu har jag bara enhetstester på mina klasser och inte controllers därav
            den låga % på covrage.
        </p><br>
        <h4>Complexity (komplexitet)</h4>
        <p>
            Complexity är hur komplicerad koden är och hur många olika vägar som kan
            tas genom koden. För varje If-sats vilkor eller loop blir det en ny väg 
            genom koden, så med många if-satser blir det snabbt många vägar. En hög
            komplexitet kan göra koden svårare att förstå och underhålla.
        </p><br>
        <h4>Cohesion (sammanhållning)</h4>
        <p>
            Cohesion handlar om hur väl ens olika delar av koden hörsamman och hur
            väl de samverkar. Ett exemple skulle vara en klass som har hand om mer 
            än en ansvarsområde, den har en dålig cohesion. En högre sammanhållning
            innebär att sammanhörande kod är grupperad, vilket också oftas gör det 
            enklar att förstå och underhålla.
        </p><br>
        <h4>Coupling (koppling)</h4>
        <p>
            Coupling är hur mycket oilka delar av koden är beroende av varandra. Så 
            om en klass använder andra klasser har den externa berode till dem. Samt 
            om klassen blir använd av en annan klass är det också ett berode. Låg 
            coupling innebär att olika delar av koden kan ändras utan att få några 
            oförväntade problem. Hög coupling kan göra det svårt att ändra koden utan 
            större konsekvenser, samt intoducera buggar.<br><br>
            Det finns två sätt att mäta Coupling, Ce (Efferent Coupling) och Ca 
            (Afferent Coupling). Ce mäter hur många andra klasser eller moduler som
            klassen är beroende av. Ca mäter hur många andra klasser eller moduler som
            är berode av just denna klassen. Tillsammans get de en indikation på hur
            väl en klass är isolerad.<br><br>
            Denna klassen används nästan av alla klasser, men använder själv 
            ingen annan.
            <a href="{{ asset('img/coupling.png') }}">
                <img class="img" src="{{ asset('img/coupling.png') }}" alt="">
            </a><br>
            Så den har ett instabilitets score på 0 (Ce/(Ce + Ca)).
        </p><br>
        <h4>CRAP (Change Risk Anti-Patterns)</h4>
        <p>
            CRAP är en metod för att mäta kodkvaliteten baserat på Coupling och 
            Complexity. CRAP räknar antalet rader kod och multiplicera med antalet
            gånger en metod eller funktion blir kallad, och till sist dividerar med
            komplexiteten för metoden eller funktionen. Ett högt CRAP kan innebära
            större risk för att ändringar i koden kan introducera nya buggar eller fel.
        </p><br>
    </section><br>

    <section>
        <h2 id="phpmetrics">Phpmetrics</h2>
        <p class="underline img-padding">
            Tre potentiella svaga punkter identifierade av phpmetrics är apiControllern,
            libraryControllern och blackJackControllern. 
        </p><br>
        <p>
            ApiControllern har potentiellt för mycket kontroll, kan möjligvis innehålla
            någon bugg, samt har den en hög komplexitet.
            <a href="{{ asset('img/apicontroller.png') }}">
                <img class="img underline img-padding" src="{{ asset('img/apicontroller.png') }}" alt="">
            </a>
            Librarycontroller har en väldigt låg Maintainability Index.
            <a href="{{ asset('img/librarycontroller.png') }}">
                <img class="img underline img-padding" src="{{ asset('img/librarycontroller.png') }}" alt="">
            </a>
            blackJackControllern har en låg Maintainability Index samt väldigt hög komplexitet. 
            <a href="{{ asset('img/blackjackcontroller.png') }}">
                <img class="img underline img-padding" src="{{ asset('img/blackjackcontroller.png') }}" alt="">
            </a>
        </p><br>
        <p>
            De tre potentiellt problemen är främst komplexitet och en hög sådan kan göra koden 
            svårare att förstå och underhålla koden. Jag har antaligen många olika utfall som
            kan ske i de olika controllerna då de innehåller ganska många olika routes. Men 
            dess routes är nödvändiga för att uppnå funktionaliteten jag vill ha. Det finns 
            säkerligen saker som går att göra för att förbättra poängen, som att dela upp i 
            flera controllers eller skriva om koden innut. Men att dela upp den känns väldigt
            onödigt när det ändå är så små som det är.<br><br>
            För att höja Maintainability Index skulle jag kunna skriva om controllerna, 
            alternativ försöka väva in mer av koden som ligger i kontrollerna in i klasserna.
        </p>
    </section><br>

    <section>
        <h2 id="scrutinizer">Scrutinizer</h2>
        <p>
            På den här bilden ser vi att den totala poängen är 9.96, kod täckning är
            bara 24% och builden har passerat. Så ett potentiellt problem skulle kunna
            vara den låga kod täckningen.
        </p><br>
        <a href="https://scrutinizer-ci.com/g/Miyarima/mvc/">
            <img class="underline img-padding" src="{{ asset('img/scrut_score.png') }}" alt="">
        </a>
        <p>
            Här är ett till av problemen Scrutinizer har identifierat, den enda klassen som inte
            har ett "A" i betyg då den har CRAP score.
        </p>
        <a href="{{ asset('img/scrut_api.png') }}">
            <img class="img underline img-padding" src="{{ asset('img/scrut_api.png') }}" alt="">
        </a>
        <p>
            Scrutinizer hittade här en major bugg.
        </p>
        <a href="{{ asset('img/scrut_bug.png') }}">
            <img class="img underline img-padding" src="{{ asset('img/scrut_bug.png') }}" alt="">
        </a>
        <p>
            De tre potentiella problemen Scrutnizer har hittat är låg kod täckning, en klass 
            som har högt CRAP score och några buggar.<br><br>
            Nu har jag låg kod täckning för att vi bara gjorde enhetstester för våra klasser
            och större delen av koden befinner sig i mina controllers. CRAP:en i apiControllern
            är nog pågrund av en onädigt komplex if-sats och att Phpmetrics identifierade den som
            en "Gud" klass.<br><br>
            "Buggarna" skulle bara uppstå om man letar efter en bok som inte finns, då stämmer inte 
            retur värde på metoden. Vilket inte spelar någon stor roll, Scrutinizer själv klassar
            de som "Severity minor".
        </p>
    </section><br>

    <section>
        <h2 id="förbättringar">Förbättringar</h2>
        <p>
            Nu har jag inte speciellt mycket att välja på så jag tänker fixa metoden som har B
            i betyg för att förhoppningsvis komma upp i en 10. Detta tänker jag göra genom att
            skriva om större delar av metoden. Jag har en onödig if-sats som kan skriva om ganska
            mycket bättre.<br><br>
            Jag tänker också fixa major buggen Scrutinizer hittade LibraryRepository genom att
            följa vad den säger och lägga till en extra type-check. Jag väljer att fixa denna
            då en allvarlig bugg känns ganska vikigt att få bort.<br><br>
            Till sist är planen att få upp kod täckningen. En röd 24% ser inte speciellt rolig
            ut, särskilt inte när alla de andra är gröna. Så att få den gul i alla fall skulle 
            nog se bättre ut.<br><br>
            Jag tror att Scrutnizers poäng kommer bli 10, det kommer att se bättre ut med en högre
            procent i kod täckning, samt att inte har något major bugg känns bättre.

        </p><br>
        <h4>Efter implementation</h4>
        <p>
            Nu har jag inte speciellt mycket att välja på så jag tänker fixa metoden som har B
            i betyg för att förhoppningsvis komma upp i en 10.
        </p><br>
    </section><br>

{% endblock %}